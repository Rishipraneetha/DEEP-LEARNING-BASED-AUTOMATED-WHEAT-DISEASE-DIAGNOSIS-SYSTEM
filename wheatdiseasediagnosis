# Deep Learning-Based Automated Wheat Disease Diagnosis System
# Required Libraries
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout from tensorflow.keras.optimizers import Adam
import matplotlib.pyplot as plt
import numpy as np
import os
# Step 1: Data Preprocessing and Augmentation train_path = "dataset/train"
test_path = "dataset/test"
train_datagen = ImageDataGenerator(rescale=1./255, rotation_range=20, zoom_range=0.2, horizontal_flip=True, shear_range=0.2)
test_datagen = ImageDataGenerator(rescale=1./255) train_set = train_datagen.flow_from_directory(train_path,
target_size=(128, 128), batch_size=32, class_mode='categorical')
test_set = test_datagen.flow_from_directory(test_path, target_size=(128, 128),
batch_size=32, class_mode='categorical')
# Step 2: Model Architecture
model = Sequential([
Conv2D(32, (3,3), activation='relu', input_shape=(128, 128, 3)), MaxPooling2D(2,2),
Conv2D(64, (3,3), activation='relu'), MaxPooling2D(2,2), Conv2D(128, (3,3), activation='relu'), MaxPooling2D(2,2),
Flatten(), Dropout(0.5),
Dense(128, activation='relu'),
Dense(3, activation='softmax') # 3 classes: healthy, rust, leaf_blight])
# Step 3: Compile the Model model.compile(optimizer=Adam(learning_rate=0.0001),
loss='categorical_crossentropy', metrics=['accuracy'])
# Step 4: Train the Model history = model.fit(train_set,
epochs=15, validation_data=test_set)
# Step 5: Save the Model model.save("wheat_disease_model.h5")
# Step 6: Visualize Accuracy and Loss plt.plot(history.history['accuracy'], label="Train Accuracy") plt.plot(history.history['val_accuracy'], label="Test Accuracy") plt.title("Accuracy over Epochs")
plt.xlabel("Epochs")
plt.ylabel("Accuracy") plt.legend()
plt.show()
plt.plot(history.history['loss'], label="Train Loss") plt.plot(history.history['val_loss'], label="Test Loss") plt.title("Loss over Epochs")
plt.ylabel("Loss")
plt.legend() plt.show()
# Step 7: Predict on a New Image
from tensorflow.keras.preprocessing import image
def predict_image(img_path):
img = image.load_img(img_path, target_size=(128, 128)) img_array = image.img_to_array(img)/255.0
img_array = np.expand_dims(img_array, axis=0)
prediction = model.predict(img_array) classes = list(train_set.class_indices.keys()) predicted_class = classes[np.argmax(prediction)]
print(f"Predicted class: {predicted_class}") return predicted_class
# Example usage:
# predict_image("sample_wheat_leaf.jpg")
